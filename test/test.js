const wnn = require('../index.js')
const test = require('tape')

test('extract words only, default regex and options', function (t) {
  t.plan(1)
  const oldString = 'I want only words! I told you a 1000000 times'
  const newArray = wnn.extract(oldString)
  t.deepEqual(newArray, ['I', 'want', 'only', 'words', 'I', 'told', 'you', 'a', 'times'])
})

test('extract numbers only, predefined regex and default options', function (t) {
  t.plan(1)
  const oldString = 'I want only words! I told you a 1000000 times'
  const newArray = wnn.extract(oldString, { regex: wnn.numbers })
  t.deepEqual(newArray, ['1000000'])
})

test('extract words and numbers, predefined regex and default options', function (t) {
  t.plan(1)
  const oldString = 'I want only words! I told you a 1000000 times'
  const newArray = wnn.extract(oldString, { regex: wnn.wordsNumbers })
  t.deepEqual(newArray, ['I', 'want', 'only', 'words', 'I', 'told', 'you', 'a', '1000000', 'times'])
})

test('extract words and numbers, custom regex', function (t) {
  t.plan(1)
  const oldString = 'This happens 5 o\'clock !!!'
  const newArray = wnn.extract(oldString, { regex: '[a-z\'0-9]+' })
  t.deepEqual(newArray, ['This', 'happens', '5', 'o\'clock'])
})

test('extract words only, default regex, all lowercase', function (t) {
  t.plan(1)
  const oldString = 'I want only words! I told you a 1000000 times'
  const newArray = wnn.extract(oldString, { toLowercase: true })
  t.deepEqual(newArray, ['i', 'want', 'only', 'words', 'i', 'told', 'you', 'a', 'times'])
})

test('extract words and numbers, predefined but not default regex', function (t) {
  t.plan(1)
  const oldString = 'I want only words! I told you a 1000000 times'
  const newArray = wnn.extract(oldString, { regex: wnn.wordsNumbers })
  t.deepEqual(newArray, ['I', 'want', 'only', 'words', 'I', 'told', 'you', 'a', '1000000', 'times'])
})

test('extract words only, custom English regex (skipping Norwegian charachters)', function (t) {
  t.plan(1)
  const oldString = 'N├е m├е vi gi oss! ├Шyh, dette b├жrer galt av sted.'
  const newArray = wnn.extract(oldString, { regex: '[a-z]+' })
  t.deepEqual(newArray, ['N', 'm', 'vi', 'gi', 'oss', 'yh', 'dette', 'b', 'rer', 'galt', 'av', 'sted'])
})

test('extract words only, Norwegian text, default regex', function (t) {
  t.plan(1)
  const oldString = 'N├е m├е vi gi oss! ├Шyh, dette b├жrer galt av sted.'
  const newArray = wnn.extract(oldString)
  t.deepEqual(newArray, ['N├е', 'm├е', 'vi', 'gi', 'oss', '├Шyh', 'dette', 'b├жrer', 'galt', 'av', 'sted'])
})

test('extract words only, Hindi text, default regex', function (t) {
  t.plan(1)
  const oldString = 'рдХрд╛рд▓рд┐рдВрдЬрд░ рджреБрд░реНрдЧ, рднрд╛рд░рддреАрдп рд░рд╛рдЬреНрдп рдЙрддреНрддрд░ рдкреНрд░рджреЗрд╢ рдХреЗ рдмрд╛рдВрджрд╛ рдЬрд┐рд▓рд╛ рд╕реНрдерд┐рдд рдПрдХ рджреБрд░реНрдЧ рд╣реИред рдмреБрдиреНрджреЗрд▓рдЦрдгреНрдб рдХреНрд╖реЗрддреНрд░ рдореЗрдВ рд╡рд┐рдВрдзреНрдп рдкрд░реНрд╡рдд рдкрд░ рд╕реНрдерд┐рдд рдпрд╣ рджреБрд░реНрдЧ рд╡рд┐рд╢реНрд╡ рдзрд░реЛрд╣рд░ рд╕реНрдерд▓ рдЦрдЬреБрд░рд╛рд╣реЛ рд╕реЗ репрен.рен рдХрд┐рдореА рджреВрд░ рд╣реИред рдЗрд╕реЗ рднрд╛рд░рдд рдХреЗ рд╕рдмрд╕реЗ рд╡рд┐рд╢рд╛рд▓ рдФрд░ рдЕрдкрд░рд╛рдЬреЗрдп'
  const newArray = wnn.extract(oldString)
  t.deepEqual(newArray, ['рдХрд╛рд▓рд┐рдВрдЬрд░', 'рджреБрд░', 'рдЧ', 'рднрд╛рд░рддреАрдп', 'рд░рд╛рдЬ', 'рдп', 'рдЙрдд', 'рддрд░', 'рдк', 'рд░рджреЗрд╢', 'рдХреЗ', 'рдмрд╛рдВрджрд╛', 'рдЬрд┐рд▓рд╛', 'рд╕', 'рдерд┐рдд', 'рдПрдХ', 'рджреБрд░', 'рдЧ', 'рд╣реИ', 'рдмреБрди', 'рджреЗрд▓рдЦрдг', 'рдб', 'рдХ', 'рд╖реЗрдд', 'рд░', 'рдореЗрдВ', 'рд╡рд┐рдВрдз', 'рдп', 'рдкрд░', 'рд╡рдд', 'рдкрд░', 'рд╕', 'рдерд┐рдд', 'рдпрд╣', 'рджреБрд░', 'рдЧ', 'рд╡рд┐рд╢', 'рд╡', 'рдзрд░реЛрд╣рд░', 'рд╕', 'рдерд▓', 'рдЦрдЬреБрд░рд╛рд╣реЛ', 'рд╕реЗ', 'рдХрд┐рдореА', 'рджреВрд░', 'рд╣реИ', 'рдЗрд╕реЗ', 'рднрд╛рд░рдд', 'рдХреЗ', 'рд╕рдмрд╕реЗ', 'рд╡рд┐рд╢рд╛рд▓', 'рдФрд░', 'рдЕрдкрд░рд╛рдЬреЗрдп'])
})

test('extract words and numbers, Hindi text, predefined regex', function (t) {
  t.plan(1)
  const oldString = 'рдХрд╛рд▓рд┐рдВрдЬрд░ рджреБрд░реНрдЧ, рднрд╛рд░рддреАрдп рд░рд╛рдЬреНрдп рдЙрддреНрддрд░ рдкреНрд░рджреЗрд╢ рдХреЗ рдмрд╛рдВрджрд╛ рдЬрд┐рд▓рд╛ рд╕реНрдерд┐рдд рдПрдХ рджреБрд░реНрдЧ рд╣реИред рдмреБрдиреНрджреЗрд▓рдЦрдгреНрдб рдХреНрд╖реЗрддреНрд░ рдореЗрдВ рд╡рд┐рдВрдзреНрдп рдкрд░реНрд╡рдд рдкрд░ рд╕реНрдерд┐рдд рдпрд╣ рджреБрд░реНрдЧ рд╡рд┐рд╢реНрд╡ рдзрд░реЛрд╣рд░ рд╕реНрдерд▓ рдЦрдЬреБрд░рд╛рд╣реЛ рд╕реЗ репрен.рен рдХрд┐рдореА рджреВрд░ рд╣реИред рдЗрд╕реЗ рднрд╛рд░рдд рдХреЗ рд╕рдмрд╕реЗ рд╡рд┐рд╢рд╛рд▓ рдФрд░ рдЕрдкрд░рд╛рдЬреЗрдп'
  const newArray = wnn.extract(oldString, { regex: wnn.wordsNumbers })
  t.deepEqual(newArray, ['рдХрд╛рд▓рд┐рдВрдЬрд░', 'рджреБрд░', 'рдЧ', 'рднрд╛рд░рддреАрдп', 'рд░рд╛рдЬ', 'рдп', 'рдЙрдд', 'рддрд░', 'рдк', 'рд░рджреЗрд╢', 'рдХреЗ', 'рдмрд╛рдВрджрд╛', 'рдЬрд┐рд▓рд╛', 'рд╕', 'рдерд┐рдд', 'рдПрдХ', 'рджреБрд░', 'рдЧ', 'рд╣реИ', 'рдмреБрди', 'рджреЗрд▓рдЦрдг', 'рдб', 'рдХ', 'рд╖реЗрдд', 'рд░', 'рдореЗрдВ', 'рд╡рд┐рдВрдз', 'рдп', 'рдкрд░', 'рд╡рдд', 'рдкрд░', 'рд╕', 'рдерд┐рдд', 'рдпрд╣', 'рджреБрд░', 'рдЧ', 'рд╡рд┐рд╢', 'рд╡', 'рдзрд░реЛрд╣рд░', 'рд╕', 'рдерд▓', 'рдЦрдЬреБрд░рд╛рд╣реЛ', 'рд╕реЗ', 'репрен', 'рен', 'рдХрд┐рдореА', 'рджреВрд░', 'рд╣реИ', 'рдЗрд╕реЗ', 'рднрд╛рд░рдд', 'рдХреЗ', 'рд╕рдмрд╕реЗ', 'рд╡рд┐рд╢рд╛рд▓', 'рдФрд░', 'рдЕрдкрд░рд╛рдЬреЗрдп'])
})

test('extract words only, Chinese simplified text, default regex', function (t) {
  t.plan(1)
  const oldString = 'ф╕Ьше┐цЦЗхМЦшо║цИШцШпф╕нхНОц░СхЫ╜хдзщЩЖцЧ╢цЬЯхЕ│ф║ОцЭ▒цЦ╣цЦЗхМЦхТМше┐цЦ╣цЦЗхМЦх╝ВхРМуАБщХ┐чЯнхТМхПЦшИНчЪДшо║цИШуАВш┐ЩхЬ║ш╛йшо║хзЛф║О1915х╣┤уАКщЭТх╣┤цЭВх┐ЧуАЛф╣ЛхИЫчлЛя╝МшЗ│1927х╣┤хМЧф╝РхЙНч╗УцЭЯуАВ'
  const newArray = wnn.extract(oldString)
  t.deepEqual(newArray, ['ф╕Ьше┐цЦЗхМЦшо║цИШцШпф╕нхНОц░СхЫ╜хдзщЩЖцЧ╢цЬЯхЕ│ф║ОцЭ▒цЦ╣цЦЗхМЦхТМше┐цЦ╣цЦЗхМЦх╝ВхРМ', 'щХ┐чЯнхТМхПЦшИНчЪДшо║цИШ', 'ш┐ЩхЬ║ш╛йшо║хзЛф║О', 'х╣┤', 'щЭТх╣┤цЭВх┐Ч', 'ф╣ЛхИЫчлЛ', 'шЗ│', 'х╣┤хМЧф╝РхЙНч╗УцЭЯ'])
})

test('extract words only, Russian text, default regex', function (t) {
  t.plan(1)
  const oldString = '╨Т 1963 ╨│╨╛╨┤╤Г ╨╜╨░ ╨▓╨╛╨┤╤Г ╨▒╤Л╨╗╨░ ╤Б╨┐╤Г╤Й╨╡╨╜╨░ ╤А╨╡╨┐╨╗╨╕╨║╨░ ╨╕╤Б╤В╨╛╤А╨╕╤З╨╡╤Б╨║╨╛╨│╨╛ ╨║╨╛╤А╨░╨▒╨╗╤П тАФ Bluenose II, ╤Б╤В╨░╨▓╤И╨░╤П ┬л╨┐╨░╤А╤Г╤Б╨╜╤Л╨╝ ╨┐╤А╨╡╨┤╤Б╤В╨░╨▓╨╕╤В╨╡╨╗╨╡╨╝ ╨Э╨╛╨▓╨╛╨╣ ╨и╨╛╤В╨╗╨░╨╜╨┤╨╕╨╕┬╗. '
  const newArray = wnn.extract(oldString)
  t.deepEqual(newArray, ['╨Т', '╨│╨╛╨┤╤Г', '╨╜╨░', '╨▓╨╛╨┤╤Г', '╨▒╤Л╨╗╨░', '╤Б╨┐╤Г╤Й╨╡╨╜╨░', '╤А╨╡╨┐╨╗╨╕╨║╨░', '╨╕╤Б╤В╨╛╤А╨╕╤З╨╡╤Б╨║╨╛╨│╨╛', '╨║╨╛╤А╨░╨▒╨╗╤П', 'Bluenose', 'II', '╤Б╤В╨░╨▓╤И╨░╤П', '╨┐╨░╤А╤Г╤Б╨╜╤Л╨╝', '╨┐╤А╨╡╨┤╤Б╤В╨░╨▓╨╕╤В╨╡╨╗╨╡╨╝', '╨Э╨╛╨▓╨╛╨╣', '╨и╨╛╤В╨╗╨░╨╜╨┤╨╕╨╕'])
})

test('extract words only from string w/ words, number and emoticon', function (t) {
  t.plan(1)
  const oldString = 'A ticket to хдзщШк costs ┬е2000 ЁЯСМ'
  const newArray = wnn.extract(oldString, { regex: wnn.words })
  t.deepEqual(newArray, ['A', 'ticket', 'to', 'хдзщШк', 'costs'])
})

test('extract words and numbers from string w/ words, number and emoticon', function (t) {
  t.plan(1)
  const oldString = 'A ticket to хдзщШк costs ┬е2000 ЁЯСМ'
  const newArray = wnn.extract(oldString, { regex: wnn.wordsNumbers })
  t.deepEqual(newArray, ['A', 'ticket', 'to', 'хдзщШк', 'costs', '2000'])
})

test('extract words and emojis from string w/ words, number and emoticon', function (t) {
  t.plan(1)
  const oldString = 'A ticket to хдзщШк costs ┬е2000 ЁЯСМ'
  const newArray = wnn.extract(oldString, { regex: wnn.wordsEmojis })
  t.deepEqual(newArray, ['A', 'ticket', 'to', 'хдзщШк', 'costs', 'ЁЯСМ'])
})

test('extract numbers and emojis from string w/ words, number and emoticon', function (t) {
  t.plan(1)
  const oldString = 'A ticket to хдзщШк costs ┬е2000 ЁЯСМ'
  const newArray = wnn.extract(oldString, { regex: wnn.numbersEmojis })
  t.deepEqual(newArray, ['2000', 'ЁЯСМ'])
})

test('extract words, numbers and emojis from string w/ words, number and emoticon, to lowercase', function (t) {
  t.plan(1)
  const oldString = 'A ticket to хдзщШк costs ┬е2000 ЁЯСМЁЯШДЁЯШД ЁЯШв'
  const newArray = wnn.extract(oldString, { regex: wnn.wordsNumbersEmojis, toLowercase: true })
  t.deepEqual(newArray, ['a', 'ticket', 'to', 'хдзщШк', 'costs', '2000', 'ЁЯСМЁЯШДЁЯШД', 'ЁЯШв'])
})

test('extract tags', function (t) {
  t.plan(1)
  const oldString = 'A #ticket to #хдзщШк costs ┬е2000 ЁЯСМЁЯШДЁЯШД ЁЯШв'
  const newArray = wnn.extract(oldString, { regex: wnn.tags, toLowercase: true })
  t.deepEqual(newArray, ['#ticket', '#хдзщШк'])
})

test('extract names', function (t) {
  t.plan(1)
  const oldString = 'A #ticket to #хдзщШк costs @bob and @ч╛ОцЮЧ ┬е2000 ЁЯСМЁЯШДЁЯШД ЁЯШв'
  const newArray = wnn.extract(oldString, { regex: wnn.tags, toLowercase: true })
  t.deepEqual(newArray, ['#ticket', '#хдзщШк'])
})
